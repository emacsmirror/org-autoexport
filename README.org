#+title: Org Autoexport
#+author: Glenn Hutchings
#+email: zondo42@gmail.com

#+options: author:nil num:nil toc:t tags:nil
#+startup: show3levels

#+property: header-args+ :eval no-export :exports both :noweb yes :mkdirp yes

#+auto_export: gfm
#+auto_export: html

{{{badge_melpa(org-autoexport)}}}

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: intro
  :END:

This emacs package allows you to synchronize exported versions of your [[https://orgmode.org/][org]]
files, by auto-exporting them every time you save.

My original reason for writing it was because I prefer to write docs in org
mode, but some forge sites don't support org mode as a format for their
=README= files (looking at you, [[https://lists.sr.ht/~sircmpwn/sr.ht-discuss/%3Cfe7aa296-9c90-463d-b4e6-50eeb7e57428%40localhost%3E][sourcehut]]) and insist on [[https://www.adamhyde.net/whats-wrong-with-markdown/][Markdown]].  But I
don't want to have to remember to export after each change.

This being emacs, there are several ways to do it.  One is simply to add a
local ~after-save-hook~ function (here's one that auto-exports to
[[https://github.github.com/gfm/][github-flavoured]] Markdown on save):

#+begin_example
# Local Variables:
# eval: (add-hook 'after-save-hook #'org-gfm-export-to-markdown nil 'local)
# End:
#+end_example

This works, but I find it ugly.  It means copy-pasting hard-to-remember
code at the end of each org file, instead of declaring the export in the
same way as other org declarations.  More seriously, it doesn't take
narrowing or the active region into account: if the file is saved while its
buffer is narrowed, or a region is active, only that part of the buffer
will be exported.

Instead I want to be able to do something similar to what the
[[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] package does for tangling, and be able to say:

#+begin_example
,#+auto_export: gfm
#+end_example

That way, I can have the auto-export control for a bunch of org files as
part of a common setup file declared by =#+setupfile:=, so I don't have to
repeat myself.

* Usage
  :PROPERTIES:
  :header-args+: :eval no
  :CUSTOM_ID: usage
  :END:

The package defines a minor mode called =org-autoexport-mode=, which (if
enabled) will try to export to other formats after saving the current org
file.  It will perform one export for each =#+auto_export:= option it finds.
You can also invoke the export process interactively, via the
~org-autoexport-do-export()~ function.

By default the exported filename is based on the org filename.  You can use
the =EXPORT_FILE_NAME= file property to override this.

Auto-export will fail if the requested export backend can't be found, and
you'll get a popup warning buffer to that effect.  In that case you will
need to install and load the export backend first (for example, to get the
=gfm= export mentioned above, you will need to load the [[https://github.com/larstvei/ox-gfm][ox-gfm]] package).

If want to suppress export for particular files (e.g., files included in
other files via =#+setupfile:=) you can turn autoexport mode off for those
files via local variables:

#+begin_example
# Local Variables:
# org-autoexport-mode: nil
# End:
#+end_example

*Warning:* This package currently only works with exporters that export to a
single format.  Some exporters (e.g., [[https://github.com/kawabata/ox-pandoc][ox-pandoc]]) export to many different
formats, using their own custom export functions instead of
=org-export-to-file()=, and as a result won't work correctly with
=org-autoexport=.  The particular case of =ox-pandoc= is supported by another
package: [[https://github.com/Y0ngg4n/org-auto-export-pandoc][org-auto-export-pandoc]].

* Installation
  :PROPERTIES:
  :header-args+: :eval no
  :CUSTOM_ID: install
  :END:

Simply require the package in your emacs init file and hook it into org
mode:

#+begin_src elisp :results silent
  (require 'org-autoexport)
  (add-hook 'org-mode-hook 'org-autoexport-mode)
#+end_src

Alternatively, you can install from MELPA via =use-package=:

#+begin_src elisp :results silent
  (use-package org-autoexport
    :defer t
    :hook (org-mode . org-autoexport-mode))
#+end_src

Autoexport mode adds an =AutoExp= indicator to the mode line to show that
it's active.  You can change or suppress that using the [[https://www.gnu.org/software/emacs/manual/html_node/use-package/Diminish.html][diminish]] option of
=use-package=.

* Contributing
  :PROPERTIES:
  :CUSTOM_ID: contrib
  :END:

You can find the source repo on [[https://git.sr.ht/~zondo/org-autoexport][sourcehut]].  Report any problems or
suggestions [[https://todo.sr.ht/~zondo/org-autoexport][here]], or you can email me directly at [[mailto:zondo42@gmail.com][zondo42@gmail.com]].

* License
  :PROPERTIES:
  :CUSTOM_ID: license
  :END:

This package is licensed under the the [[https://opensource.org/license/bsd-2-clause][2-Clause BSD License]].

#+name: license-text
#+begin_src text :exports none :eval no :tangle COPYING
  Copyright (c) <<this-year()>>, Glenn Hutchings

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice, this
     list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#+end_src

* Development                                                      :noexport:

** Setup

Development of this package is done with [[https://emacs-eldev.github.io/eldev][Eldev]], and a Makefile.  If you
don't have Eldev, you will need to install it:

#+begin_src sh :results silent
  url=https://raw.github.com/emacs-eldev/eldev/master/bin/eldev
  instdir=$HOME/.local/bin

  curl -fsSL $url > $instdir/eldev
  chmod a+x $instdir/eldev

  echo Installed eldev to $instdir
#+end_src

** Package

Package name:

#+name: pkg
#+begin_src text
  org-autoexport
#+end_src

Summary:

#+name: summary
#+begin_src text
  Auto-export org file on save
#+end_src

The package description:

#+name: description
#+begin_src text
  It is common to want to export org files to one or more other formats
  every time you save your changes.  This package this allows you to do so
  using #+auto_export: options in the org file.
#+end_src

Version:

#+name: version
#+begin_src text
  1.1
#+end_src

Version history:

#+name: history
#+begin_src text
  Version 1.0 (22 Aug 2024):
     First release

  Version 1.1 (30 Nov 2024):
     Deactivate mark before exporting
     Support the EXPORT_FILE_NAME file property
#+end_src

Package header:

#+name: header
#+begin_src text
  Author: Glenn Hutchings <zondo42@gmail.com>
  Maintainer: Glenn Hutchings <zondo42@gmail.com>
  URL: https://git.sr.ht/~zondo/<<pkg>>
  Version: <<version>>
  Keywords: org, wp
  Package-Requires: ((emacs "28.1") (org "9.6"))

  This file is not part of GNU Emacs.
#+end_src

What year is it now?

#+name: this-year
#+begin_src shell :results output silent
  echo -n $(date +%Y)
#+end_src

The tangled package file:

#+begin_src elisp :tangle org-autoexport.el
  ;;; <<pkg>>.el --- <<summary>> -*- lexical-binding: t; -*-

  ;; <<header>>

  ;; <<license-text>>

  ;;; Commentary:

  ;; <<description>>

  ;;; History:

  ;; <<history>>

  ;;; Code:

  (require 'org)
  (require 'ox)

  <<suffix-map>>

  <<get-backends>>

  <<get-backend>>

  <<get-suffix>>

  <<get-filename>>

  ;;;###autoload
  <<do-export>>

  ;;;###autoload
  <<autoexport-mode>>

  (provide '<<pkg>>)

  ;;; <<pkg>>.el ends here
#+end_src

** Testing
   :PROPERTIES:
   :header-args+: :eval no
   :END:

Doing the export directly:

#+begin_src elisp
  (org-autoexport-do-export)
#+end_src

Toggling the minor mode:

#+begin_src elisp
  (org-autoexport-mode 'toggle)
#+end_src

Some unit tests, in [[https://github.com/jorgenschaefer/emacs-buttercup/blob/master/docs/writing-tests.md][buttercup]] format:

#+begin_src elisp :tangle test/org-autoexport-tests.el
  ;;; -*- lexical-binding: t; -*-

  (require 'buttercup)
  (require 'org-autoexport)

  (describe "org-autoexport"
    (before-all
     (find-file "README.org"))

    (it "finds the backend names in README.org"
        (expect (org-autoexport-get-backend-info) :to-equal '("gfm" "html")))

    (it "finds the correct filename"
        (expect (org-autoexport-get-filename) :to-equal "README"))

    (it "finds the correct suffix"
        (expect (org-autoexport-get-suffix "html") :to-equal "html")
        (expect (org-autoexport-get-suffix "gfm") :to-equal "md")
        (expect (org-autoexport-get-suffix "latex") :to-equal "tex"))

    (it "finds the backend from its name"
        (expect (org-autoexport-get-backend "html") :not :to-be nil)
        (expect (org-autoexport-get-backend "latex") :not :to-be nil)
        (expect (org-autoexport-get-backend "nosuch") :to-be nil)))
#+end_src

** Implementation

Each of the =#+auto_export:= statements declares an org export /backend/ that
does the export.  With that in mind, here's an outline of the export
algorithm:

1. Get the export backend information from the =#+auto_export:= statements in
   the current file, in the form =name [function]=, where =name= is the name of
   the backend (e.g., =html=) and the optional =function= is the suffix of a
   function used to do the export (see next step).

2. For each backend, do this:

   - Find the suffix of the file to export to.  For most backends, that's
     just the name of the backend.  But there are special cases: for
     github-flavoured markdown the backend is ~'gfm~ but the suffix is =md=.

   - Create the export filename by concatenating the current file's prefix
     with the export suffix.

   - Get the export backend object from its string representation.

   - If the backend is found, do the export.  Otherwise, warn the user.

3. Er... that's it.

Here's a function to get the backend information, using
~org-collect-keywords~:

#+name: get-backends
#+begin_src elisp :results verbatim :results silent
  (defun org-autoexport-get-backend-info ()
    "Get a list of auto-export backend information from the current file.

  This is the list of items declared by #+auto_export:
  keywords in the org file.  Each item is in the format

      NAME [FUNCTION]

  where NAME is the backend name and the optional FUNCTION is the suffix
  of a custom export function."
    (cdar (org-collect-keywords '("AUTO_EXPORT"))))
#+end_src

We can test that on the current file:

#+name: test-backends
#+begin_src elisp :results verbatim
  (org-autoexport-get-backend-info)
#+end_src

Here's the result:

#+RESULTS: test-backends
: ("gfm" "pandoc to-rtf")

To map the backend names to the right suffix, we'll use an alist which
lists the special cases:

#+name: suffix-map
#+begin_src elisp :results silent
  (defconst org-autoexport-backend-suffix-map
    '(("gfm" . "md")
      ("latex" . "tex"))
    "Mapping of export backend name to file suffix.

  Most of the time, the name and suffix are the same.  This
  variable lists the special cases where they are different.")
#+end_src

And a function which uses this, defaulting to the backend name:

#+name: get-suffix
#+begin_src elisp :results silent
  (defun org-autoexport-get-suffix (backend-name)
    "Return the file suffix used to autoexport using BACKEND-NAME.

  Default is the name of the backend itself, unless a special case
  is found in `org-autoexport-backend-suffix-map'."
    (alist-get backend-name org-autoexport-backend-suffix-map backend-name nil 'equal))
#+end_src

Let's test it:

#+name: test-suffixes
#+begin_src elisp
  (let (suffix (result "") info name)
    (dolist (backend-info (org-autoexport-get-backend-info) result)
      (setq name (car (string-split backend-info)))
      (setq suffix (org-autoexport-get-suffix name))
      (setq result (concat result (format "Backend '%s' -> '%s'\n" name suffix)))))
#+end_src

The value of =result= is:

#+RESULTS: test-suffixes
: Backend 'gfm' -> 'md'
: Backend 'pandoc' -> 'pandoc'

Next we need a function to look up the backend object given its name,
defaulting to =nil= if not found:

#+name: get-backend
#+begin_src elisp :results silent
  (defun org-autoexport-get-backend (backend-name)
    "Return the export backend used to autoexport using BACKEND-NAME."
    (org-export-get-backend (intern backend-name)))
#+end_src

Does it work?

#+name: test-lookup
#+begin_src elisp
  (let ((result "") found)
    (dolist (name '("gfm" "html" "md" "latex" "pandoc" "docx") result)
      (cond ((org-autoexport-get-backend name)
             (setq found "found"))
            (t
             (setq found "not found")))
      (setq result (concat result (format "Backend '%s' %s\n" name found)))))
#+end_src

The value of =result= is:

#+RESULTS: test-lookup
: Backend 'gfm' found
: Backend 'html' found
: Backend 'md' found
: Backend 'latex' found
: Backend 'pandoc' found
: Backend 'docx' not found

We also need a way to determine what filename to use when exporting.  This
will usually be the filename of the org file, but there is a property
called =EXPORT_FILE_NAME= which should be allowed to override it:

#+name: get-filename
#+begin_src elisp :results silent
  (defun org-autoexport-get-filename ()
    "Return the export filename used for auto-export.

  Use the EXPORT_FILE_NAME file property if set; otherwise the
  basename of the current buffer's filename."
    (let ((propname (org-collect-keywords '("EXPORT_FILE_NAME")))
          (bufname (buffer-file-name)))
      (cond (propname
             (file-name-base (cadar propname)))
            (bufname
             (file-name-base bufname))
            (t
             (error "Buffer has no associated filename or EXPORT_FILE_NAME property")))))
#+end_src

Testing:

#+name: test-filename
#+begin_src elisp
  (org-autoexport-get-filename)
#+end_src

#+RESULTS: test-filename
: README

Here's the function which puts it all together, and does the exporting:

#+name: do-export
#+begin_src elisp :results silent
  (defun org-autoexport-do-export ()
    "Export the current org file to one or more backends if required.

  The backends are listed in the #+auto_export: directives.  If a backend
  or export function is unknown, a warning is written to the *Warnings* buffer.

  Buffer restrictions are ignored when autoexporting."
    (interactive)
    (save-restriction
      (save-mark-and-excursion
        (widen)
        (let (backend suffix path msg name func)
          (dolist (backend-info (org-autoexport-get-backend-info))
            (setq name (car (string-split backend-info)))
            (setq func (cadr (string-split backend-info)))
            (cond (func
                   (setq func (format "org-%s-export-%s" name func))
                   (if (intern-soft func)
                       (funcall (intern func))
                     (warn "No export function called '%s'" func)
                     (display-buffer "*Warnings*")))
                  (t
                   (setq suffix (org-autoexport-get-suffix name))
                   (setq backend (org-autoexport-get-backend name))
                   (setq path (concat (org-autoexport-get-filename) "." suffix))
                   (cond (backend
                          (setq msg (format "Exporting %s to '%s'" name path))
                          (message "%s..." msg)
                          (org-export-to-file backend path nil)
                          (message "%s...done" msg))
                         (t
                          (warn "No export backend for '%s'" name)
                          (display-buffer "*Warnings*"))))))))))
#+end_src

Next we need a minor autoexport mode, which (if enabled) does the
exporting.  The idea here is to have this turned on in ~org-mode-hook~.

#+name: autoexport-mode
#+begin_src elisp :results silent
  (define-minor-mode org-autoexport-mode
    "Automatically export Org mode files with #+auto_export options."
    :lighter " AutoExp"

    (if org-autoexport-mode
        (add-hook 'after-save-hook #'org-autoexport-do-export nil 'local)
      (remove-hook 'after-save-hook #'org-autoexport-do-export 'local)))
#+end_src

And that's it.

** Todo list

- TODO: Add a customization group
- TODO: Add more package tests

* Epilogue                                                         :noexport:

#+macro: badge_melpa [[https://melpa.org/#/$1][file:https://melpa.org/packages/$1-badge.svg]]

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
