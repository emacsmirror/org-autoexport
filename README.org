#+title: Org Autoexport
#+author: Glenn Hutchings
#+email: zondo42@gmail.com

#+options: author:nil num:nil toc:t tags:nil
#+startup: show3levels

#+property: header-args+ :eval no-export :exports both :noweb yes

#+auto_tangle: t
#+auto_export: gfm
#+auto_export: html

* Introduction

This emacs package allows you to maintain exported versions of your org
files, by auto-exporting them every time you save.  My original reason for
this was because I like writing docs in org mode, but some git repo sites
don't support org mode as a format for their =README= files (looking at you,
[[https://sr.ht/][sourcehut]]).

This being emacs, there are several ways to do it.  One is simply to add a
local ~after-save-hook~ function (here's one that auto-exports to
[[https://github.github.com/gfm/][github-flavoured markdown]] on save):

#+begin_example
# Local Variables:
# eval: (add-hook 'after-save-hook #'org-gfm-export-to-markdown nil 'local)
# End:
#+end_example

Which works, but I find it ugly.  It means copy-pasting hard-to-remember
code at the end of each org file, instead of declaring the export in the
same way as other org declarations.  Instead, I want to be able to do
something similar to what the [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] packages does for tangling:

#+begin_example
,#+auto_export: gfm
,#+auto_export: html
#+end_example

That way, I can have the auto-export control for a bunch of org files as
part of a common setup file declared by =#+setupfile:=, so I don't have to
repeat myself.

* Usage

Simply require the package in you emacs init and hook it into org-mode.

#+begin_src elisp :results silent
  (require 'org-autoexport)
  (add-hook 'org-mode-hook 'org-autoexport-mode)
#+end_src

or you can use =use-package=:

#+begin_src elisp :results silent
  (use-package org-autoexport
    ;; this line is necessary only if you cloned the repo in your site-lisp directory
    :load-path "site-lisp/org-autoexport/"
    :defer t
    :hook (org-mode . org-autoexport-mode))
#+end_src

If the minor mode is on, it will try to automatically export your org files
if they contain any =#+auto_export:= options.

* Implementation

Each of the =#+auto_export:= statements declares an org export /backend/ that
does the export.  With that in mind, here's an outline of the export
algorithm:

1. Get the export backend names from the =#+auto_export:= statements in the
   current file.

2. For each backend, do this:

   - Find the suffix of the file to export to.  For most backends, that's
     just the name of the backend.  But there are special cases: for
     [[https://github.github.com/gfm/][github-flavoured markdown]] the backend is ~'gfm~ but the suffix is =md=.

   - Create the export filename by concatenating the current file's prefix
     with the export suffix.

   - Get the export backend object from its string representation.

   - If the backend is found, do the export.  Otherwise, warn the user.

3. Er... that's it.

Here's a function to get the backend names, using ~org-collect-keywords~:

#+name: get-backends
#+begin_src elisp :results verbatim :results silent
  (defun org-autoexport-get-backends ()
    "Get a list of backend names to auto-export from the current file.

  This is the list of backend names declared by #+auto_export:
  keywords in the org file."
    (delete "AUTO_EXPORT" (car (org-collect-keywords '("AUTO_EXPORT")))))
#+end_src

We can test that on the current file:

#+name: test-backends
#+begin_src elisp :results verbatim
  (org-autoexport-get-backends)
#+end_src

#+RESULTS: test-backends
: ("gfm" "html")

To map the backend names to the right suffix, we'll use an alist which
lists the special cases:

#+name: suffix-map
#+begin_src elisp :results silent
  (defconst org-autoexport-backend-suffix-map
    '(("gfm" . "md")
      ("latex" . "tex"))
    "Mapping of export backend name to file suffix.

  Most of the time, the name and suffix are the same.  This
  variable lists the special cases where they are different.")
#+end_src

And a function which uses this, defaulting to the backend name:

#+name: get-suffix
#+begin_src elisp :results silent
  (defun org-autoexport-get-suffix (backend-name)
    "Return the file suffix used to autoexport using BACKEND-NAME.

  Default is the name of the backend itself, unless a special case
  is found in `org-autoexport-backend-suffix-map'."
    (alist-get backend-name org-autoexport-backend-suffix-map backend-name nil 'equal))
#+end_src

Let's test it:

#+name: test-suffixes
#+begin_src elisp
  (let (suffix (result ""))
    (dolist (backend-name (org-autoexport-get-backends) result)
      (setq suffix (org-autoexport-get-suffix backend-name))
      (setq result (concat result (format "Backend '%s' -> '%s'\n" backend-name suffix)))))
#+end_src

The value of =result= is:

#+RESULTS: test-suffixes
: Backend 'gfm' -> 'md'
: Backend 'html' -> 'html'

Next we need a function to look up the backend object given its name,
defaulting to =nil= if not found:

#+name: get-backend
#+begin_src elisp :results silent
  (defun org-autoexport-get-backend (backend-name)
    "Return the export backend used to autoexport using BACKEND-NAME."
    (org-export-get-backend (intern backend-name)))
#+end_src

Does it work?

#+name: test-lookup
#+begin_src elisp
  (let ((result "") result)
    (dolist (name '("gfm" "html" "md" "latex" "docx") result)
      (cond ((org-autoexport-get-backend name)
             (setq result "found"))
            (t
             (setq result "not found")))
      (setq result (concat result (format "Backend '%s' %s\n" name result)))))
#+end_src

The value of =result= is:

#+RESULTS: test-lookup
: not foundBackend 'docx' not found

Here's the function which puts it all together, and does the exporting:

#+name: do-export
#+begin_src elisp :results silent
  (defun org-autoexport-do-export ()
    "Export the current org file to one or more backends if required.

  The backends are listed in the #+auto_export: directives.  If a backend
  is unknown, a warning is written to the *Warnings* buffer."

    (let (backend suffix filename)
      (unless (buffer-file-name)
        (error "Buffer has no associated filename"))
      (dolist (backend-name (org-autoexport-get-backends))
        (setq suffix (org-autoexport-get-suffix backend-name))
        (setq backend (org-autoexport-get-backend backend-name))
        (setq filename (concat (file-name-base (buffer-file-name)) "." suffix))
        (cond (backend
               (org-export-to-file backend filename))
              (t
               (warn "No export backend for '%s'" backend-name))))))
#+end_src

Next we need a minor autoexport mode, which (if enabled) does the
exporting.  The idea here is to have this turned on in ~org-mode-hook~.

#+name: autoexport-mode
#+begin_src elisp :results silent
  (define-minor-mode org-autoexport-mode
    "Automatically export Org mode files with #+auto_export options."
    :lighter " Exp"

    (if org-autoexport-mode
        (add-hook 'after-save-hook #'org-autoexport-do-export nil 'local)
      (remove-hook 'after-save-hook #'org-autoexport-do-export 'local)))
#+end_src

And that's it.  If you're looking at the org mode source of this file,
you'll see that the source code is tangled directly from it.

* License

This package is licensed under the the 2-Clause BSD License:

#+name: license
#+begin_src text :eval no :tangle LICENSE
  Copyright (c) 2024, Glenn Hutchings

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice, this
     list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#+end_src

* Testing                                                          :noexport:

Doing the export directly:

#+begin_src elisp :results silent :eval no
  (org-autoexport-do-export)
#+end_src

Toggling the minor mode:

#+begin_src elisp :results silent :eval no
  (org-autoexport-mode 'toggle)
#+end_src

Testing the package import:

#+begin_src elisp :results silent :eval no
  (load-file "org-autoexport.el")
#+end_src

* Package                                                          :noexport:
  :PROPERTIES:
  :header-args+: :eval no
  :END:

The package name:

#+name: pkg
#+begin_src text
  org-autoexport
#+end_src

The package summary:

#+name: summary
#+begin_src text
  Auto-export org file on save
#+end_src

The package header:

#+name: header
#+begin_src text
  Author: Glenn Hutchings <zondo42@gmail.com>
  Maintainer: Glenn Hutchings <zondo42@gmail.com>
  URL: https://git.sr.ht/~zondo/<<pkg>>
  Version: 0.1
  Keywords: tools
  Package-Requires: ((emacs "28.1") (org "9.6"))

  This file is not part of GNU Emacs.
#+end_src

The package description:

#+name: description
#+begin_src text
  It is common to want to export org files to one or more other formats
  every time you save your changes.  This package this allows you to do so
  using #+auto_export: options in the org file.
#+end_src

The tangled package file:

#+begin_src elisp :tangle org-autoexport.el
  ;;; <<pkg>>.el -- <<summary>> -*- lexical-binding: t; -*-

  ;; <<header>>

  ;; <<license>>

  ;;; Commentary:

  ;; <<description>>

  ;;; Code:

  (require 'org)
  (require 'ox)

  <<suffix-map>>

  <<get-backends>>

  <<get-backend>>

  <<get-suffix>>

  <<do-export>>

  ;;;###autoload
  <<autoexport-mode>>

  (provide '<<pkg>>)

  ;;; <<pkg>>.el ends here
#+end_src

* Todo list                                                        :noexport:

- Add a customization group
- Consider using async for export
- Auto-tangle the correct date and year
- Prepare for [[https://github.com/mz-pdm/melpa/blob/master/CONTRIBUTING.org][MELPA]]

* Epilogue                                                         :noexport:

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
